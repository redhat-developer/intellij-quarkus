<idea-plugin>
  <id>com.redhat.devtools.intellij.quarkus</id>
  <name>Quarkus Tools</name>
  <version>1.0</version>
  <vendor email="developers@redhat.com" url="https://www.redhat.com">Red-Hat</vendor>

  <description><![CDATA[
      <img src="https://raw.githubusercontent.com/redhat-developer/intellij-quarkus/master/src/main/resources/quarkus_icon_rgb_32px_default.png" width="32" height="32"/>
      <h2>Quarkus Tools for IntelliJ</h2>
      <p>A plugin aim at Quarkus based development, providing easy bootstrapping and code assist from Quarkus related assets.<p>
  ]]></description>

  <change-notes><![CDATA[
    <p><b>1.10.0</b></p>
    <ul>
      <li>Add Quarkus configuration support to run and debug Quarkus applications</li>
      <li>Fix Quarkus library dependencies
      <li>Fix CVE-2021-25738 (Yaml parsing)</li>
    </ul>
    <p><b>1.9.0</b></p>
    <ul>
      <li>Quarkus wizard allows to select Quarkus stream</li>
      <li>Fix compatibility issue with IntelliJ 2021.3</li>
    </ul>
    <p><b>1.8.0</b></p>
    <ul>
      <li>Add support for CodeLens/Inlay (for JAX-RS endpoints)</li>
      <li>Configuration files with profile scope get content assist and syntax validation</li>
    </ul>
    <p><b>1.7.0</b></p>
    <ul>
      <li>Add support for projects with Gradle DSL</li>
      <li>Configuration files with profile scope get content assist and syntax validation</li>
    </ul>
    <p><b>1.6.0</b></p>
    <ul>
      <li>Quarkus 2.x</li>
      <li>Fix compatibility issues with IntelliJ 2021.2</li>
    </ul>
    <p><b>1.5.0</b></p>
    <ul>
      <li>Quarkus project wizard now uses POST requests</li>
      <li>Opt-in telemetry</li>
      <li>Bug fixes</li>
    </ul>
    <p><b>1.4.0</b></p>
    <ul>
      <li>Quarkus project wizard now displays codestarts enabled extensions with an icon</li>
      <li>Bug fixes</li>
    </ul>
    <p><b>1.3.0</b></p>
    <ul>
      <li>Quarkus project wizard now offers codestarts options</li>
      <li>Bug fixes</li>
    </ul>
    <p><b>1.2.0</b></p>
    <ul>
      <li>LSP4MP 1.0 based</li>
      <li>Better Eclipse Microprofile support: JWT, Health, GraphQL and Reactive Messagging
      properties added</li>
    </ul>
    <p><b>1.1.0</b></p>
    <ul>
      <li>Support YAML configuration files (code assist, syntax validation)</li>
    </ul>
    <p><b>1.0.4</b></p>
    <ul>
      <li>Fix whole IDE deadlock while completion proposals were computed</li>
    </ul>
    <p><b>1.0.3</b></p>
    <ul>
      <li>Fix whole IDE deadlock while completion proposals were computed</li>
      <li>Various bug fixes</li>
    </ul>
    <p><b>1.0.2</b></p>
    <ul>
      <li>Extension details and link to guide are now available in the Quarkus wizard</li>
      <li>Java code assist was polluted by snippets (see <a href="https://github.com/redhat-developer/intellij-quarkus/issues/152">#152</a>)</li>
      <li>Various bug fixes</li>
    </ul>
    <p><b>1.0.1</b></p>
    <ul>
      <li>Java quickdoc was not displayed anymore if Quarkus Tools is installed</li>
    </ul>
    <p><b>1.0.0</b></p>
    <ul>
      <li>Based on microprofile-ls</li>
      <li>Removed dependency on LSP Support plugin</li>
      <li>Added Goto property definition</li>
      <li>MicroProfile Health support: validation of Java source</li>
      <li>MicroProfile Fault Tolerance support: new property keys if Microprofile Fault Tolerance used in Java sources</li>
      <li>MicroProfile Rest Client support: proper injection points are checked</li>
      <li>MicroProfile LRA support: new property keys if Microprofile LRA dependency is present</li>
      <li>MicroProfile OpenAPI support: new property keys if Microprofile OpenAPI dependency is present</li>
      <li>MicroProfile Metrics support: new property keys if Microprofile Metrics dependency is present</li>
      <li>MicroProfile OpenTracing support: new property keys if Microprofile OpenTracing dependency is present</li>
      <li>The Quarkus project/module wizard has been enhanced</li>
    </ul>
    <p><b>0.0.3</b></p>
    <ul>
      <li>Fix issue in newly created Maven projects causing incomplete completion in application.properties</li>
    </ul>
    <p><b>0.0.2</b></p>
    <ul>
      <li>Add support for Gradle projects</li>
      <li>Fix issue in wizard causing incorrect version</li>
      <li>Plugin renamed to Quarkus Tools</li>
    </ul>
    <p><b>0.0.1</b></p>
    <p>Initial release</p>
    <ul>
      <li>Project and module wizard through code.quarkus.io</li>
      <li>application.properties code assist through the quarkus-ls LSP language server</li>
    </ul>
  ]]>
  </change-notes>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
  <idea-version since-build="203"/>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
       on how to target different products -->
  <depends>com.intellij.modules.lang</depends>
  <depends>com.intellij.modules.java</depends>
  <depends>com.intellij.properties</depends>
  <depends>com.redhat.devtools.intellij.telemetry</depends>
  <depends optional="true" config-file="plugin-maven.xml">org.jetbrains.idea.maven</depends>
  <depends optional="true" config-file="plugin-gradle.xml">org.jetbrains.plugins.gradle</depends>
  <depends optional="true" config-file="plugin-json.xml">com.intellij.modules.json</depends>

  <extensions defaultExtensionNs="com.intellij">
    <postStartupActivity implementation="com.redhat.devtools.intellij.quarkus.QuarkusPostStartupActivity"/>
    <!-- Add your extensions here -->
    <facetType implementation="com.redhat.devtools.intellij.quarkus.facet.QuarkusFacetType"/>
    <frameworkSupport implementation="com.redhat.devtools.intellij.quarkus.facet.QuarkusFrameworkSupportProvider"/>
    <framework.detector implementation="com.redhat.devtools.intellij.quarkus.facet.QuarkusFrameworkDetector"/>
    <library.type implementation="com.redhat.devtools.intellij.quarkus.facet.QuarkusLibraryType"/>
    <framework.type implementation="com.redhat.devtools.intellij.quarkus.facet.QuarkusFrameworkType"/>
    <moduleBuilder builderClass="com.redhat.devtools.intellij.quarkus.module.QuarkusModuleBuilder"/>
    <iconProvider implementation="com.redhat.devtools.intellij.quarkus.lang.QuarkusIconProvider"/>
    <completion.contributor
            language="Properties"
            order="before javaClassReference"
            implementationClass="com.redhat.devtools.intellij.quarkus.lang.QuarkusPropertyClassNameCompletionRemover"/>

    <properties.implicitPropertyUsageProvider implementation="com.redhat.devtools.intellij.quarkus.lang.QuarkusImplicitPropertyUsageProvider"/>
    <projectService serviceImplementation="com.redhat.devtools.intellij.quarkus.QuarkusProjectService"/>
    <configurationType implementation="com.redhat.devtools.intellij.quarkus.run.QuarkusRunConfigurationType"/>

    <!-- Qute -->
    <facetType implementation="com.redhat.devtools.intellij.qute.facet.QuteFacetType"/>
    <frameworkSupport implementation="com.redhat.devtools.intellij.qute.facet.QuteFrameworkSupportProvider"/>
    <framework.detector implementation="com.redhat.devtools.intellij.qute.facet.QuteFrameworkDetector"/>
    <library.type implementation="com.redhat.devtools.intellij.qute.facet.QuteLibraryType"/>
    <framework.type implementation="com.redhat.devtools.intellij.qute.facet.QuteFrameworkType"/>
    <fileType name="Qute"
              language="Qute"
              instance="QUTE"
              extensions="qute.html;qute.htm;qute.json;qute.txt;qute.yaml;qute.yml"
              implementationClass="com.redhat.devtools.intellij.qute.lang.QuteFileType"/>
    <lang.fileViewProviderFactory language="Qute"
                                  implementationClass="com.redhat.devtools.intellij.qute.lang.QuteFileViewProviderFactory"/>
    <lang.parserDefinition language="Qute" implementationClass="com.redhat.devtools.intellij.qute.lang.QuteParserDefinition"/>
    <pom.declarationSearcher implementation="com.redhat.devtools.intellij.qute.lang.QuteDeclarationSearcher"/>
    <lang.substitutor language="HTML" implementationClass="com.redhat.devtools.intellij.qute.lang.QuteLanguageSubstitutor"/>
    <lang.substitutor language="TEXT" implementationClass="com.redhat.devtools.intellij.qute.lang.QuteLanguageSubstitutor"/>
    <lang.substitutor language="JSON" implementationClass="com.redhat.devtools.intellij.qute.lang.QuteLanguageSubstitutor"/>
    <lang.substitutor language="yaml" implementationClass="com.redhat.devtools.intellij.qute.lang.QuteLanguageSubstitutor"/>
  </extensions>

  <extensionPoints>
    <extensionPoint name="toolDelegate" interface="com.redhat.devtools.intellij.quarkus.tool.ToolDelegate"/>
    <extensionPoint name="propertiesProvider" interface="com.redhat.devtools.intellij.lsp4mp4ij.psi.core.IPropertiesProvider"/>
    <extensionPoint name="javaHoverParticipant" interface="com.redhat.devtools.intellij.lsp4mp4ij.psi.core.java.hover.IJavaHoverParticipant"/>
    <extensionPoint name="javaDiagnosticsParticipant" interface="com.redhat.devtools.intellij.lsp4mp4ij.psi.core.java.diagnostics.IJavaDiagnosticsParticipant"/>
    <extensionPoint name="projectLabelProvider" interface="com.redhat.devtools.intellij.lsp4mp4ij.psi.core.IProjectLabelProvider"/>
    <extensionPoint name="javaDefinitionParticipant" interface="com.redhat.devtools.intellij.lsp4mp4ij.psi.core.java.definition.IJavaDefinitionParticipant"/>
    <extensionPoint name="javaCompletionParticipant" interface="com.redhat.devtools.intellij.lsp4mp4ij.psi.core.java.completion.IJavaCompletionParticipant"/>
    <extensionPoint name="javaCodeLensParticipant" interface="com.redhat.devtools.intellij.lsp4mp4ij.psi.core.java.codelens.IJavaCodeLensParticipant"/>

    <!-- Qute -->
    <extensionPoint name="qute.dataModelProvider" beanClass="com.redhat.devtools.intellij.qute.psi.internal.template.datamodel.DataModelProviderRegistry$DataModelProviderBean"/>
  </extensionPoints>
  <extensions defaultExtensionNs="com.redhat.devtools.intellij.quarkus">
    <!--LSP4MP-->
    <propertiesProvider implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.config.properties.MicroProfileConfigPropertyProvider"/>
    <propertiesProvider implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.restclient.properties.MicroProfileRegisterRestClientProvider"/>
    <propertiesProvider implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.faulttolerance.properties.MicroProfileFaultToleranceProvider"/>
    <propertiesProvider implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.contextpropagation.properties.MicroProfileContextPropagationProvider"/>
    <propertiesProvider implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.lra.properties.MicroProfileLRAProvider"/>
    <propertiesProvider implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.metrics.properties.MicroProfileMetricsProvider"/>
    <propertiesProvider implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.openapi.properties.MicroProfileOpenAPIProvider"/>
    <propertiesProvider implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.opentracing.properties.MicroProfileOpenTracingProvider"/>
    <propertiesProvider implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.reactivemessaging.properties.MicroProfileReactiveMessagingProvider"/>
    <propertiesProvider implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.graphql.properties.MicroProfileGraphQLProvider"/>
    <propertiesProvider implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.health.properties.MicroProfileHealthProvider"/>
    <propertiesProvider implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.jwt.properties.MicroProfileJWTProvider"/>
    <propertiesProvider implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.jul.properties.JULPropertyProvider"/>
    <propertiesProvider implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.jul.properties.JBossLogManagerPropertyProvider"/>

    <javaHoverParticipant implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.config.java.MicroProfileConfigHoverParticipant"/>

    <javaDiagnosticsParticipant implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.health.java.MicroProfileHealthDiagnosticsParticipant"/>
    <javaDiagnosticsParticipant implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.restclient.java.MicroProfileRestClientDiagnosticsParticipant"/>
    <javaDiagnosticsParticipant implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.faulttolerance.java.MicroProfileFaultToleranceDiagnosticsParticipant"/>
    <javaDiagnosticsParticipant implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.metrics.java.MicroProfileMetricsDiagnosticsParticipant"/>

    <projectLabelProvider implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.core.providers.MicroProfileProjectLabelProvider"/>

    <javaDefinitionParticipant implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.config.java.MicroProfileConfigDefinitionParticipant"/>
    <javaDefinitionParticipant implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.faulttolerance.java.MicroProfileFaultToleranceDefinitionParticipant"/>

    <javaCompletionParticipant implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.faulttolerance.java.MicroProfileFaultToleranceCompletionParticipant"/>

    <javaCodeLensParticipant implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.jaxrs.java.JaxRsCodeLensParticipant"/>
    <javaCodeLensParticipant implementation="com.redhat.devtools.intellij.lsp4mp4ij.psi.internal.restclient.java.MicroProfileRestClientCodeLensParticipant"/>

    <!--quarkus-ls-->
    <propertiesProvider implementation="com.redhat.microprofile.psi.internal.quarkus.providers.QuarkusCoreProvider"/>
    <propertiesProvider implementation="com.redhat.microprofile.psi.internal.quarkus.providers.QuarkusConfigRootProvider"/>
    <propertiesProvider implementation="com.redhat.microprofile.psi.internal.quarkus.providers.QuarkusConfigPropertiesProvider"/>
    <propertiesProvider implementation="com.redhat.microprofile.psi.internal.quarkus.providers.QuarkusKubernetesProvider"/>
    <propertiesProvider implementation="com.redhat.microprofile.psi.internal.quarkus.providers.QuarkusHibernateORMProvider"/>
    <propertiesProvider implementation="com.redhat.microprofile.psi.internal.quarkus.providers.QuarkusScheduledPropertiesProvider"/>

    <projectLabelProvider implementation="com.redhat.microprofile.psi.internal.quarkus.providers.QuarkusProjectLabelProvider"/>

    <javaHoverParticipant implementation="com.redhat.microprofile.psi.internal.quarkus.providers.QuarkusScheduledHoverParticipant"/>

    <javaCodeLensParticipant implementation="com.redhat.microprofile.psi.internal.quarkus.jaxrs.java.QuarkusJaxRsCodeLensParticipant"/>

    <!-- Qute -->
    <qute.dataModelProvider implementationClass="com.redhat.devtools.intellij.qute.psi.internal.template.datamodel.CheckedTemplateSupport"/>
    <qute.dataModelProvider implementationClass="com.redhat.devtools.intellij.qute.psi.internal.template.datamodel.TemplateExtensionSupport"/>
    <qute.dataModelProvider implementationClass="com.redhat.devtools.intellij.qute.psi.internal.template.datamodel.TemplateFieldSupport"/>

    <qute.dataModelProvider namespaces="inject,cdi"
                            description="A CDI bean annotated with `@Named` can be referenced in any template through `cdi` and/or `inject` namespaces."
                            url="https://quarkus.io/guides/qute-reference#injecting-beans-directly-in-templates"
                            implementationClass="com.redhat.devtools.intellij.qute.psi.internal.extensions.quarkus.InjectNamespaceResolverSupport"/>
  </extensions>

  <application-components>
  </application-components>
  <module-components>
    <component>
      <implementation-class>com.redhat.devtools.intellij.quarkus.search.QuarkusModuleComponent</implementation-class>
    </component>
  </module-components>

  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="/META-INF/lsp.xml" xpointer="xpointer(/idea-plugin/*)"/>
  <actions>
    <action id="microprofile.command.open.uri"
            class="com.redhat.devtools.intellij.lsp4mp4ij.psi.core.command.MicroprofileOpenURIAction"
            text="MicroprofileOpenURIAction"/>

    <action id="qute.command.open.uri"
            class="com.redhat.devtools.intellij.qute.psi.core.command.QuteOpenURIAction"/>
    <action id="qute.command.generate.template.file"
            class="com.redhat.devtools.intellij.qute.psi.core.command.QuteGenerateTemplateAction"/>
    <action id="qute.command.java.definition"
            class="com.redhat.devtools.intellij.qute.psi.core.command.QuteJavaDefinitionAction"/>

  </actions>
</idea-plugin>
