
plugins {
    id "org.jetbrains.intellij" version "1.1.4"
    id "com.adarshr.test-logger" version "1.7.0"
    id 'idea'
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'jacoco'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
def remoteRobotVersion = "0.11.2"
def fixturesVersion = "1.1.18"

intellij {
    version = ideaVersion //for a full list of IntelliJ IDEA releases please see https://www.jetbrains.com/intellij-repository/releases
    plugins = ['java', 'maven', 'gradle-java', 'properties', 'yaml', 'com.redhat.devtools.intellij.telemetry:0.0.1.9']
    pluginName = 'Quarkus Tools'
    updateSinceUntilBuild = false
}

runPluginVerifier {
    ideVersions = [ideaVersion]
}

publishPlugin {
    token    = jetBrainsToken
    channels = [jetBrainsChannel]
}

repositories {
    mavenCentral()
    maven {
        url 'https://repository.jboss.org/nexus/content/repositories/snapshots'
    }
    maven {
        url 'https://repository.jboss.org/nexus/content/groups/public'
    }
    maven {
        url 'https://repo.eclipse.org/content/repositories/lsp4mp-snapshots'
    }
    maven {
        url 'https://repo.eclipse.org/content/repositories/lsp4mp-releases'
    }
    maven {
        url 'https://packages.jetbrains.team/maven/p/ij/intellij-dependencies'
    }
}

configurations {
    compile {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    lsp
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

downloadRobotServerPlugin.version = remoteRobotVersion

sourceSets {
    main  {
        if (Integer.parseInt(ideaVersion.substring(3).substring(0, 4)) >= 2021) {
            java.srcDirs += 'src/main/java-post2021'
        } else {
            java.srcDirs += 'src/main/java-pre2021'
        }
    }
    test {
        java.srcDir 'src/test/java'
        java.srcDir 'intellij-community/java/compiler/tests'
        java.srcDir 'intellij-community/platform/external-system-impl/testSrc'
        java.srcDir 'intellij-community/platform/testFramework/extensions/src'
        java.srcDir 'intellij-community/plugins/gradle/testSources'
        java.srcDir 'intellij-community/plugins/gradle/tooling-extension-impl/testSources'
        resources.srcDir file('src/test/resources')
    }

    integrationTest {
        java.srcDir file('src/it/java')
        resources.srcDir file('src/it/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

tasks.withType(Test) {
    environment 'GRADLE_RELEASE_REPOSITORY','https://services.gradle.org/distributions'
}

dependencies {
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.9'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.9.3'
    compile 'org.zeroturnaround:zt-zip:1.14'
    compile 'com.kotcrab.remark:remark:1.2.0'
    compile 'io.quarkus:quarkus-core:1.5.0.Final'
    compile 'io.quarkus:quarkus-core-deployment:1.5.0.Final'
    compile 'io.quarkus:quarkus-arc:1.5.0.Final'
    compile 'org.eclipse.lsp4mp:org.eclipse.lsp4mp.ls:0.1.0'
    compile 'org.eclipse.lsp4j:org.eclipse.lsp4j:0.8.1'
    compile 'com.vladsch.flexmark:flexmark:0.50.50'
    integrationTestImplementation("com.intellij.remoterobot:remote-robot:$remoteRobotVersion")
    integrationTestImplementation("com.intellij.remoterobot:remote-fixtures:$fixturesVersion")
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    integrationTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    lsp('org.eclipse.lsp4mp:org.eclipse.lsp4mp.ls:0.2.1:uber') {
        transitive = false
    }
    lsp ('com.redhat.microprofile:com.redhat.quarkus.ls:0.10.0') {
        transitive = false
    }
    compile files(new File(buildDir, 'server')) {
        builtBy 'copyDeps'
    }
    testCompile 'org.assertj:assertj-core:3.19.0'
}


task copyDeps(type: Copy) {
    from configurations.lsp
    into new File(buildDir, 'server/server')
}

runIde {
    systemProperties['com.redhat.devtools.intellij.telemetry.mode'] = 'debug'
}

runIdeForUiTests {
    systemProperty "robot-server.port", "8082" // default port 8080
    systemProperties['com.redhat.devtools.intellij.telemetry.mode'] = 'debug'
}

prepareSandbox {
    dependsOn copyDeps
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

check.dependsOn jacocoTestReport

integrationTest {
    useJUnitPlatform()
}

group 'com.redhat.devtools.intellij'
version projectVersion // Plugin version
