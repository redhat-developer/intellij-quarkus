
plugins {
    id "org.jetbrains.intellij" version "1.9.0"
    id 'idea'
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
    id 'jacoco'
    id "de.undercouch.download" version "5.0.2"
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

intellij {
    version = ideaVersion //for a full list of IntelliJ IDEA releases please see https://www.jetbrains.com/intellij-repository/releases
    plugins = ['java', 'maven', 'gradle-java', 'properties', 'yaml', 'com.redhat.devtools.intellij.telemetry:0.0.3.33']
    pluginName = 'Quarkus Tools'
    updateSinceUntilBuild = false
}

runPluginVerifier {
    ideVersions = [ideaVersion]
    failureLevel = org.jetbrains.intellij.tasks.RunPluginVerifierTask.FailureLevel.NONE
}

publishPlugin {
    token    = jetBrainsToken
    channels = [jetBrainsChannel]
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://repository.jboss.org/nexus/content/repositories/snapshots'
    }
    maven {
        url 'https://repository.jboss.org/nexus/content/groups/public'
    }
    maven {
        url 'https://repo.eclipse.org/content/repositories/lsp4mp-snapshots'
    }
    maven {
        url 'https://repo.eclipse.org/content/repositories/lsp4mp-releases'
    }
    maven {
        url 'https://packages.jetbrains.team/maven/p/ij/intellij-dependencies'
    }
}

configurations {
    runtimeClasspath {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    lsp
    testRuntime {
        setCanBeResolved(true)
    }
}

sourceSets {
    main  {
        if (Integer.parseInt(ideaVersion.substring(3).substring(0, 4)) >= 2021) {
            java.srcDirs += 'src/main/java-post2021'
        } else {
            java.srcDirs += 'src/main/java-pre2021'
        }
        if (Integer.parseInt(ideaVersion.substring(3).substring(0, 4)) > 2022 ||
                (Integer.parseInt(ideaVersion.substring(3).substring(0, 4)) == 2022 &&
                        Integer.parseInt(ideaVersion.substring(8).substring(0, 1)) >= 2)) {
            java.srcDirs += 'src/main/java-post2022.2'
        } else {
            java.srcDirs += 'src/main/java-pre2022.2'
        }
    }
    test {
        java.srcDir 'src/test/java'
        java.srcDir 'intellij-community/java/compiler/tests'
        java.srcDir 'intellij-community/platform/external-system-impl/testSrc'
        java.srcDir 'intellij-community/platform/testFramework/extensions/src'
        java.srcDir 'intellij-community/platform/lang-impl/testSources'
        java.srcDir 'intellij-community/plugins/maven/src/test/java'
        java.srcDir 'intellij-community/plugins/gradle/testSources'
        java.srcDir 'intellij-community/plugins/gradle/tooling-extension-impl/testSources'
        resources.srcDir file('src/test/resources')
    }

    integrationTest {
        java.srcDir file('src/it/java')
        resources.srcDir file('src/it/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

tasks.withType(Test) {
    environment 'GRADLE_RELEASE_REPOSITORY','https://services.gradle.org/distributions'
    systemProperty 'idea.log.leaked.projects.in.tests', 'false'
    systemProperty 'idea.maven.test.mirror', 'https://repo1.maven.org/maven2'
}

tasks.withType(Copy) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

dependencies {
    implementation 'org.zeroturnaround:zt-zip:1.14'
    implementation 'com.kotcrab.remark:remark:1.2.0'
    implementation 'org.jsoup:jsoup:1.14.2'
    implementation("io.quarkus:quarkus-core:$quarkusVersion") {
        transitive = false
    }
    implementation("io.quarkus:quarkus-core-deployment:$quarkusVersion") {
    	exclude group: 'org.aesh'
    	exclude group: 'org.apache.commons'
    	exclude group: 'org.wildfly.common'
    	exclude group: 'io.quarkus.gizmo'
    	exclude group: 'org.ow2.asm'
    	exclude group: 'io.quarkus'
    	exclude group: 'org.eclipse.sisu'
    	exclude group: 'org.graalvm.sdk'
    	exclude group: 'org.junit.platform'
    	exclude group: 'org.junit.jupiter'
    }
    implementation("io.quarkus:quarkus-arc:$quarkusVersion") {
        transitive = false
    }
    implementation 'org.eclipse.lsp4mp:org.eclipse.lsp4mp.ls:0.5.0'
    implementation 'org.eclipse.lsp4j:org.eclipse.lsp4j:0.15.0'
    //required by lsp4j as the version from IJ is incompatible
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'com.vladsch.flexmark:flexmark:0.50.50'
    testImplementation 'com.redhat.devtools.intellij:intellij-common-ui-test-library:0.2.0'
    lsp('org.eclipse.lsp4mp:org.eclipse.lsp4mp.ls:0.5.0:uber') {
        transitive = false
    }
    lsp ('com.redhat.microprofile:com.redhat.quarkus.ls:0.12.1') {
        transitive = false
    }
    implementation 'com.redhat.microprofile:com.redhat.qute.ls:0.12.1'
    lsp ('com.redhat.microprofile:com.redhat.qute.ls:0.12.1:uber') {
        transitive = false
    }
    implementation files(new File(buildDir, 'server')) {
        builtBy 'copyDeps'
    }
    testImplementation 'org.assertj:assertj-core:3.19.0'
}


task copyDeps(type: Copy) {
    from configurations.lsp
    into new File(buildDir, 'server/server')
    rename '^(.*)(-[0-9]+.[0-9]+.[0-9]+(-SNAPSHOT)?)(.*)$', '$1$4'
}

task downloadQuteProjectsZipFile(type: Download) {
    src 'https://download.jboss.org/jbosstools/vscode/stable/builds/qute-jdt/2022-07-25_16-50-21-B140/all/repo/com.redhat.qute.jdt.test-0.12.1-projects.zip'
    dest new File(buildDir, 'com.redhat.qute.jdt.test-projects.zip')
}

task downloadAndUnzipQuteProjects(dependsOn: downloadQuteProjectsZipFile, type: Copy) {
    from zipTree(downloadQuteProjectsZipFile.dest)
    into new File(projectDir, 'projects/qute')
}

task downloadQuarkusProjectsZipFile(type: Download) {
    src 'https://download.jboss.org/jbosstools/vscode/stable/builds/quarkus-jdt/2022-07-25_16-50-21-B140/all/repo/com.redhat.microprofile.jdt.quarkus.test-0.12.1-projects.zip'
    dest new File(buildDir, 'com.redhat.microprofile.jdt.quarkus.test-projects')
}

task downloadAndUnzipQuarkusProjects(dependsOn: downloadQuarkusProjectsZipFile, type: Copy) {
    from zipTree(downloadQuarkusProjectsZipFile.dest)
    into new File(projectDir, 'projects/quarkus')
}

runIde {
    systemProperties['com.redhat.devtools.intellij.telemetry.mode'] = 'debug'
    systemProperties['com.redhat.devtools.intellij.quarkus.trace'] = 'true'
}

runIdeForUiTests {
    systemProperty "robot-server.port", System.getProperty("robot-server.port")
}

prepareSandbox {
    dependsOn copyDeps
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

check.dependsOn jacocoTestReport
test.dependsOn downloadAndUnzipQuarkusProjects, downloadAndUnzipQuteProjects

group 'com.redhat.devtools.intellij'
version projectVersion // Plugin version
